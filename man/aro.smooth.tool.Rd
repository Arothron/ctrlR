% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/aro.smooth.tool.r
\name{aro.smooth.tool}
\alias{aro.smooth.tool}
\title{aro.smooth.tool}
\usage{
aro.smooth.tool(model, SL.set, L.set, algorithms = c("taubin", "angweight",
  "fujilaplace", "laplace", "hclaplace"), iter = 10, tarface,
  deltaFJ = NULL, deltaAW = NULL, lambda = c(0.01, 0.05, 0.1, 0.15, 0.2),
  tau = 0.01, lambda.levels = 5, deltaFJ.levels = 5, deltaAW.levels = 5,
  lambda.start = 0.95, deltaFJ.start = 0.95, deltaAW.start = 0.95,
  lambda.f = 0.99, deltaFJ.f = 0.99, deltaAW.f = 0.99, lambda.iter = 70,
  l.lambda.iter = 7, deltaFJ.iter = 70, l.deltaFJ.iter = 7,
  deltaAW.iter = 70, l.deltaAW.iter = 7, num.cores = NULL,
  iter_scale_tau = 1, iter_scale_fuj = 1, iter_scale_ang = 1)
}
\arguments{
\item{model}{triangular mesh stored as object of class "mesh3d"}

\item{SL.set}{character: kxm matrix semi-landmark set}

\item{L.set}{character: kxm matrix landmark set}

\item{algorithms}{character: algorithm types stored in Morpho::vcgSmooth}

\item{iter}{numeric: number of smoothing iterations (raccomended no more than 10 iteration)}

\item{tarface}{numeric: target of triangle number}

\item{deltaFJ}{numeric: setting values for deltaFJ (if NULL automatic estimation well be done)}

\item{deltaAW}{numeric: setting values for deltaAW (if NULL automatic estimation well be done)}

\item{lambda}{numeric: setting values for lambda (if NULL automatic estimation well be done)}

\item{tau}{numeric: mu value for "taubin" algorithm}

\item{lambda.levels}{numeric: length range lambda}

\item{deltaFJ.levels}{numeric: length range deltaFJ}

\item{deltaAW.levels}{numeric: length range deltaAW}

\item{lambda.start}{numeric: upper value lambda smoothing range}

\item{deltaFJ.start}{numeric: upper value deltaFJ smoothing range}

\item{deltaAW.start}{numeric: upper value deltaAW smoothing range}

\item{lambda.f}{numeric: factor for estimation lambda}

\item{deltaFJ.f}{numeric: factor for estimation deltaFJ}

\item{deltaAW.f}{numeric: factor for estimation deltaAW}

\item{lambda.iter}{numeric: iteration for lambda estimation}

\item{l.lambda.iter}{numeric: interval for lambda.iter}

\item{deltaFJ.iter}{numeric: iteration for deltaFJ estimation}

\item{l.deltaFJ.iter}{numeric: interval for deltaFJ estimation}

\item{deltaAW.iter}{numeric: iteration for deltaAW estimation}

\item{l.deltaAW.iter}{numeric: interval for deltaAW estimation}

\item{num.cores}{numeric: number of CPUs cores, if NULL use the number of physical CPUs/cores}

\item{iter_scale_tau}{numeric: iter used in scale factor estimation for taubin algorithm}

\item{iter_scale_fuj}{numeric: iter used in scale factor estimation for fujilaplace algorithm}

\item{iter_scale_ang}{numeric: iter used in scale factor estimation for angweight algorithm}
}
\value{
matrix_result matrix: matrix with all result (loss/retrieval of anatomical information) for smoothing setting iteration

CS numeric vector: semi-landmark centroid size values in starting, decimated, and best smoothed surfaces

L_set numeric: matrix for landmark set of best smoothed surface

SL_set numeric: matrix for landmark set of best smoothed surface

mesh best smoothed mesh
}
\description{
This function find the optimal smoothing algorithm setting giving a mesh a landmark set and a semi-landmark set.
}
\examples{
\dontrun{
#load the example 1: mesh, and L set
data(exp.dog.mesh)
data(exp.dog.SLset)
data(exp.dog.Lset)
example=aro.smooth.tool(model=dog.mesh,SL.set=dog.SLset,L.set=dog.Lset,iter=10,tarface=2000)
}

\dontrun{
load the example 2: mesh, and L set
data(exp.teeth.mesh)
data(exp.teeth.SLset)
data(exp.teeth.Lset)
example=aro.smooth.tool(model=teeth.mesh,SL.set=teeth.SLset,L.set=teeth.Lset,iter=10,tarface=10000,lambda.iter = 350,l.lambda.iter=20,deltaFJ.iter = 350,l.deltaFJ.iter=20,deltaAW.iter = 350,l.deltaAW.iter=20)
}
\dontrun{
load the example 3: mesh, and L set
data(exp.SCP1.mesh)
data(exp.SCP1.SLset)
data(exp.SCP1.Lset)
example=aro.smooth.tool(model=SCP1.mesh,SL.set=SCP1.SLset,L.set=SCP1.Lset,iter=10,tarface=10000,lambda.iter = 150,l.lambda.iter=20,deltaFJ.iter = 150,l.deltaFJ.iter=20,deltaAW.iter = 150,l.deltaAW.iter=20)
}
}
\author{
Antonio Profico, Alessio Veneziano, Alessandro Lanteri, Paolo Piras
}

